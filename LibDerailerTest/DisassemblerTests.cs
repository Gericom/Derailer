using System;
using Gee.External.Capstone.Arm;
using LibDerailer.CodeGraph;
using LibDerailer.IO;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace LibDerailerTest
{
    [TestClass]
    public class DisassemblerTests
    {
        [TestMethod]
        public void DisassembleArmTest()
        {
            var code = new byte[]
            {
                0x24, 0x10, 0x9F, 0xE5, 0x00, 0x30, 0xA0, 0xE3, 0x00, 0x20, 0x91, 0xE5,
                0xA8, 0x10, 0x92, 0xE5, 0x01, 0x00, 0x50, 0xE1, 0x02, 0x00, 0x00, 0x3A,
                0xAC, 0x10, 0x92, 0xE5, 0x01, 0x00, 0x50, 0xE1, 0x01, 0x30, 0xA0, 0x93,
                0x03, 0x00, 0xA0, 0xE1, 0x1E, 0xFF, 0x2F, 0xE1, 0x10, 0xAA, 0x17, 0x02
            };
            var func = Disassembler.DisassembleArm(code, 0x02059C04, ArmDisassembleMode.Arm);
            Assert.AreEqual(4, func.BasicBlocks.Count);
        }

        [TestMethod]
        public void DisassembleArmStackTest()
        {
            var code = new byte[]
            {
                0x70, 0x40, 0x2D, 0xE9, 0x10, 0xD0, 0x4D, 0xE2, 0x00, 0x60, 0xA0, 0xE1,
                0x20, 0x00, 0x96, 0xE5, 0x01, 0x50, 0xA0, 0xE1, 0x00, 0x00, 0x90, 0xE5,
                0x02, 0x40, 0xA0, 0xE1, 0x00, 0x00, 0x90, 0xE5, 0x00, 0x0E, 0xA0, 0xE1,
                0x20, 0x0E, 0xA0, 0xE1, 0x06, 0x00, 0x40, 0xE2, 0x01, 0x00, 0x50, 0xE3,
                0x10, 0xD0, 0x8D, 0x82, 0x70, 0x40, 0xBD, 0x88, 0x1E, 0xFF, 0x2F, 0x81,
                0x00, 0x20, 0x94, 0xE5, 0x00, 0x10, 0x95, 0xE5, 0x05, 0x00, 0xA0, 0xE1,
                0x01, 0x10, 0x82, 0xE0, 0xA1, 0x1F, 0x81, 0xE0, 0xC1, 0x10, 0xA0, 0xE1,
                0x28, 0x10, 0x86, 0xE5, 0x04, 0x30, 0x94, 0xE5, 0x04, 0x20, 0x95, 0xE5,
                0x04, 0x10, 0xA0, 0xE1, 0x02, 0x20, 0x83, 0xE0, 0xA2, 0x2F, 0x82, 0xE0,
                0xC2, 0x20, 0xA0, 0xE1, 0x2C, 0x20, 0x86, 0xE5, 0x08, 0x30, 0x94, 0xE5,
                0x08, 0x20, 0x95, 0xE5, 0x02, 0x20, 0x83, 0xE0, 0xA2, 0x2F, 0x82, 0xE0,
                0xC2, 0x20, 0xA0, 0xE1, 0x30, 0x20, 0x86, 0xE5, 0xCA, 0xBB, 0x04, 0xEB,
                0xA0, 0x0F, 0x80, 0xE0, 0xC0, 0x00, 0xA0, 0xE1, 0x60, 0x00, 0x86, 0xE5,
                0x00, 0x20, 0x94, 0xE5, 0x00, 0x10, 0x95, 0xE5, 0x00, 0x00, 0x8D, 0xE2,
                0x01, 0x10, 0x42, 0xE0, 0x00, 0x10, 0x8D, 0xE5, 0x04, 0x30, 0x94, 0xE5,
                0x04, 0x20, 0x95, 0xE5, 0x00, 0x10, 0xA0, 0xE1, 0x02, 0x20, 0x43, 0xE0,
                0x04, 0x20, 0x8D, 0xE5, 0x08, 0x30, 0x94, 0xE5, 0x08, 0x20, 0x95, 0xE5,
                0x02, 0x20, 0x43, 0xE0, 0x08, 0x20, 0x8D, 0xE5, 0x47, 0xBC, 0x04, 0xEB,
                0x00, 0x00, 0x9D, 0xE5, 0xB0, 0x05, 0xC6, 0xE1, 0x04, 0x00, 0x9D, 0xE5,
                0xB2, 0x05, 0xC6, 0xE1, 0x08, 0x00, 0x9D, 0xE5, 0xB4, 0x05, 0xC6, 0xE1,
                0x10, 0xD0, 0x8D, 0xE2, 0x70, 0x40, 0xBD, 0xE8, 0x1E, 0xFF, 0x2F, 0xE1
            };

            var func = Disassembler.DisassembleArm(code, 0x02018F94, ArmDisassembleMode.Arm);
            //Assert.AreEqual(3, func.BasicBlocks.Count);
        }

        [TestMethod]
        public void DeschedulingTest()
        {
            var code = new byte[]
            {
                0x20, 0x20, 0x9F, 0xE5, 0x00, 0x10, 0x92, 0xE5, 0x01, 0x19, 0x11, 0xE2,
                0x00, 0x10, 0x92, 0x05, 0x00, 0x00, 0xE0, 0x13, 0x02, 0x1A, 0x01, 0x02,
                0xA1, 0x16, 0xA0, 0x01, 0x00, 0x10, 0x80, 0x05, 0x00, 0x00, 0xA0, 0x03,
                0x1E, 0xFF, 0x2F, 0xE1, 0x00, 0x06, 0x00, 0x04
            };
            var func = Disassembler.DisassembleArm(code, 0x0214A5F0, ArmDisassembleMode.Arm);
        }

        [TestMethod]
        public void DeschedulingTest2()
        {
            var code = new uint[]
            {
                0xE92D4FF0, 0xE24DD004, 0xE5913008, 0xE5911000, 0xE1D340B0, 0xE1D172B2, 0xE1D310B8, 0xE1A0A2C4,
                0xE1A09544, 0xE1A01E81, 0xE1B01FA1, 0xE5D31004, 0xE1A062C7, 0xE1A08547, 0xE1A05000, 0xE207701F,
                0xE206601F, 0xE5D33005, 0xE208001F, 0x01871286, 0x01810500, 0xE204401F, 0xE20AA01F, 0xE209901F,
                0x028DD004, 0x01C503B6, 0x08BD4FF0, 0x012FFF1E, 0xE0428001, 0xE0400009, 0xE0000098, 0xE043B001,
                0xE1A0100B, 0xEB000000, 0xE0471004, 0xE1A07000, 0xE0000198, 0xE1A0100B, 0xEB000000, 0xE046100A,
                0xE1A06000, 0xE0000198, 0xE1A0100B, 0xEB000000, 0xE0841006, 0xE08A0000, 0xE0892007, 0xE1810280,
                0xE1800502, 0xE1C503B6, 0xE28DD004, 0xE8BD4FF0, 0xE12FFF1E
            };
            var func = Disassembler.DisassembleArm(InstructionWordsToBytes(code), 0, ArmDisassembleMode.Arm);
        }

        [TestMethod]
        public void SwitchTest()
        {
            var code = new []
            {
                0xE240100A, 0xE3510005, 0x908FF101, 0xE12FFF1E, 0xEA000004, 0xEA000005, 0xEA000006, 0xEA000007,
                0xEA000008, 0xEA000009, 0xE3A00000, 0xE12FFF1E, 0xE3A00001, 0xE12FFF1E, 0xE3A00004, 0xE12FFF1E,
                0xE3A00009, 0xE12FFF1E, 0xE3E00000, 0xE12FFF1E, 0xE3A0005A, 0xE12FFF1E
            };
            var func = Disassembler.DisassembleArm(InstructionWordsToBytes(code), 0, ArmDisassembleMode.Arm);
        }

        [TestMethod]
        public void FxMulTest()
        {
            var code = new[]
            {
                0xE0C13190, 0xE3A00B02, 0xE0933000, 0xE2A11000, 0xE1A03623, 0xE1833A01, 0xE0C12293, 0xE0920000,
                0xE2A11000, 0xE1A00620, 0xE1800A01, 0xE12FFF1E
            };
            var func = Disassembler.DisassembleArm(InstructionWordsToBytes(code), 0, ArmDisassembleMode.Arm);
        }

        [TestMethod]
        public void ConstDivTest()
        {
            var code = new[]
            {
                0xE59F3028, 0xE1A01FA0, 0xE0CC2093, 0xE080C00C, 0xE1A0C2CC, 0xE081C00C, 0xE59F3014, 0xE1A01FAC,
                0xE0C02C93, 0xE1A000C0, 0xE0810000, 0xE12FFF1E, 0xEA0EA0EB, 0x66666667u
            };
            var func = Disassembler.DisassembleArm(InstructionWordsToBytes(code), 0, ArmDisassembleMode.Arm);
        }

        [TestMethod]
        public void FxMulTest2()
        {
            var code = new byte[]
            {
                0x74, 0x30, 0x93, 0xE5, 0x00, 0x20, 0x90, 0xE5, 0x02, 0x01, 0x53, 0xE3,
                0x03, 0x20, 0xA0, 0x11, 0xB6, 0x30, 0xD0, 0xE1, 0x03, 0x3F, 0xA0, 0xE1,
                0x23, 0x3F, 0xB0, 0xE1, 0x02, 0x00, 0x00, 0x0A, 0x01, 0x00, 0x53, 0xE3,
                0x15, 0x00, 0x00, 0x0A, 0x1E, 0xFF, 0x2F, 0xE1, 0x3C, 0x30, 0x91, 0xE5,
                0x02, 0x00, 0x53, 0xE1, 0x07, 0x00, 0x00, 0xAA, 0x0C, 0x00, 0x91, 0xE5,
                0x00, 0x00, 0x83, 0xE0, 0x02, 0x00, 0x50, 0xE1, 0x03, 0x00, 0x42, 0xC0,
                0x0C, 0x00, 0x81, 0xC5, 0xB4, 0x02, 0xD1, 0xC1, 0xB6, 0x02, 0xC1, 0xC1,
                0x1E, 0xFF, 0x2F, 0xC1, 0x02, 0x00, 0x53, 0xE1, 0x1E, 0xFF, 0x2F, 0xB1,
                0x0C, 0x00, 0x91, 0xE5, 0x00, 0x00, 0x83, 0xE0, 0x02, 0x00, 0x50, 0xE1,
                0x03, 0x00, 0x42, 0xB0, 0x0C, 0x00, 0x81, 0xB5, 0xB4, 0x02, 0xD1, 0xB1,
                0xB6, 0x02, 0xC1, 0xB1, 0x1E, 0xFF, 0x2F, 0xE1, 0x3C, 0xC0, 0x91, 0xE5,
                0x02, 0x00, 0x5C, 0xE1, 0x10, 0x00, 0x00, 0xAA, 0x0C, 0x30, 0x91, 0xE5,
                0x03, 0x30, 0x8C, 0xE0, 0x02, 0x00, 0x53, 0xE1, 0x0C, 0x00, 0x00, 0xDA,
                0x0C, 0x20, 0x42, 0xE0, 0x0C, 0x20, 0x81, 0xE5, 0xF4, 0x20, 0xD0, 0xE1,
                0x18, 0x30, 0x91, 0xE5, 0x02, 0x0B, 0xA0, 0xE3, 0x93, 0xC2, 0xC2, 0xE0,
                0x00, 0x30, 0x9C, 0xE0, 0x00, 0x00, 0xA2, 0xE2, 0x23, 0x26, 0xA0, 0xE1,
                0x00, 0x2A, 0x82, 0xE1, 0x00, 0x00, 0x62, 0xE2, 0x18, 0x00, 0x81, 0xE5,
                0x1E, 0xFF, 0x2F, 0xE1, 0x02, 0x00, 0x5C, 0xE1, 0x1E, 0xFF, 0x2F, 0xB1,
                0x0C, 0x30, 0x91, 0xE5, 0x03, 0x30, 0x8C, 0xE0, 0x02, 0x00, 0x53, 0xE1,
                0x1E, 0xFF, 0x2F, 0xA1, 0x0C, 0x20, 0x42, 0xE0, 0x0C, 0x20, 0x81, 0xE5,
                0xF4, 0x20, 0xD0, 0xE1, 0x18, 0x30, 0x91, 0xE5, 0x02, 0x0B, 0xA0, 0xE3,
                0x93, 0xC2, 0xC2, 0xE0, 0x00, 0x30, 0x9C, 0xE0, 0x00, 0x00, 0xA2, 0xE2,
                0x23, 0x26, 0xA0, 0xE1, 0x00, 0x2A, 0x82, 0xE1, 0x00, 0x00, 0x62, 0xE2,
                0x18, 0x00, 0x81, 0xE5, 0x1E, 0xFF, 0x2F, 0xE1

            };
            var func = Disassembler.DisassembleArm(code, 0x0201E054, ArmDisassembleMode.Arm);
        }

        private static byte[] InstructionWordsToBytes(uint[] instructions)
        {
            var code = new byte[instructions.Length * 4];
            for (int i = 0; i < instructions.Length; i++)
                IOUtil.WriteU32Le(code, i * 4, instructions[i]);
            return code;
        }
    }
}